// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/thecodeisalreadydeployed/gitopscontroller/argocd (interfaces: ArgoCDClient)

// Package mock_argocd is a generated GoMock package.
package mock_argocd

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockArgoCDClient is a mock of ArgoCDClient interface.
type MockArgoCDClient struct {
	ctrl     *gomock.Controller
	recorder *MockArgoCDClientMockRecorder
}

// MockArgoCDClientMockRecorder is the mock recorder for MockArgoCDClient.
type MockArgoCDClientMockRecorder struct {
	mock *MockArgoCDClient
}

// NewMockArgoCDClient creates a new mock instance.
func NewMockArgoCDClient(ctrl *gomock.Controller) *MockArgoCDClient {
	mock := &MockArgoCDClient{ctrl: ctrl}
	mock.recorder = &MockArgoCDClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArgoCDClient) EXPECT() *MockArgoCDClientMockRecorder {
	return m.recorder
}

// Refresh mocks base method.
func (m *MockArgoCDClient) Refresh() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh")
	ret0, _ := ret[0].(error)
	return ret0
}

// Refresh indicates an expected call of Refresh.
func (mr *MockArgoCDClientMockRecorder) Refresh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockArgoCDClient)(nil).Refresh))
}

// Sync mocks base method.
func (m *MockArgoCDClient) Sync() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync")
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockArgoCDClientMockRecorder) Sync() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockArgoCDClient)(nil).Sync))
}
